plugins {
    id 'me.champeau.jmh' version '0.7.2'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        compileOnly 'com.google.code.gson:gson:2.11.0'
        compileOnly 'org.jetbrains:annotations:26.0.1'
    }

    compileJava {
        options.encoding = 'UTF-8'
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        withSourcesJar()
        withJavadocJar()
    }

    javadoc {
        options {
            links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
            links 'https://javadoc.io/doc/org.jetbrains/annotations/latest/'
            links 'https://javadoc.io/doc/com.google.code.gson/gson/latest/'
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId project.group
                artifactId project.name
                version project.version
                from components.java
            }
        }
    }
}

subprojects {
    dependencies {
        implementation rootProject
    }
}

dependencies {
    testImplementation(platform('org.junit:junit-bom:5.11.4'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testRuntimeOnly('org.junit.platform:junit-platform-launcher')
    testImplementation('com.google.code.gson:gson:2.11.0')
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jmh {
    warmupIterations = 5
    iterations = 10
    fork = 1
    timeUnit = 'ms'
}

def javadocProjects= [
        ':',
        ':mapper:mapper-adventure',
        ':mapper:mapper-bukkit',
        ':mapper:mapper-cloudburst',
        ':mapper:mapper-jo-nbt',
        ':mapper:mapper-minecraft',
        ':mapper:mapper-nukkit'
]

tasks.register('allJavadoc', Javadoc) {
    source javadocProjects.collect { project(it).sourceSets.main.allJava }
    classpath = files(javadocProjects.collect { project(it).sourceSets.main.compileClasspath })
    options {
        links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
        links 'https://javadoc.io/doc/org.jetbrains/annotations/latest/'
        links 'https://javadoc.io/doc/com.google.code.gson/gson/latest/'

        // Adventure mapper
        links 'https://javadoc.io/doc/net.kyori/adventure-nbt/latest/'

        // jo-nbt mapper
        links 'https://javadoc.io/doc/se.llbit/jo-nbt/latest/'
    }
    destinationDir = file(project.layout.buildDirectory.dir('docs/all-javadoc'))
}